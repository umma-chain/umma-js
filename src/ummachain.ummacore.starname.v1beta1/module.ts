// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import {
  EncodeObject, GeneratedType, OfflineSigner, Registry,
} from "@cosmjs/proto-signing";
import { msgTypes } from "./registry";
import { IgniteClient } from "../client";
import { MissingWalletError } from "../helpers";
import { Api } from "./rest";
import {
  MsgReplaceAccountResources, MsgDeleteDomain, MsgDeleteAccountCertificate, MsgRenewAccount, MsgTransferDomain, MsgReplaceAccountMetadata, MsgTransferAccount, MsgRegisterDomain, MsgRenewDomain, MsgAddAccountCertificate, MsgDeleteAccount, MsgRegisterAccount,
} from "./types/starname/tx";

import { Resource as typeResource, Domain as typeDomain, Account as typeAccount } from "./types";

export {
  MsgReplaceAccountResources, MsgDeleteDomain, MsgDeleteAccountCertificate, MsgRenewAccount, MsgTransferDomain, MsgReplaceAccountMetadata, MsgTransferAccount, MsgRegisterDomain, MsgRenewDomain, MsgAddAccountCertificate, MsgDeleteAccount, MsgRegisterAccount,
};

type sendMsgReplaceAccountResourcesParams = {
  value: MsgReplaceAccountResources,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteDomainParams = {
  value: MsgDeleteDomain,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteAccountCertificateParams = {
  value: MsgDeleteAccountCertificate,
  fee?: StdFee,
  memo?: string
};

type sendMsgRenewAccountParams = {
  value: MsgRenewAccount,
  fee?: StdFee,
  memo?: string
};

type sendMsgTransferDomainParams = {
  value: MsgTransferDomain,
  fee?: StdFee,
  memo?: string
};

type sendMsgReplaceAccountMetadataParams = {
  value: MsgReplaceAccountMetadata,
  fee?: StdFee,
  memo?: string
};

type sendMsgTransferAccountParams = {
  value: MsgTransferAccount,
  fee?: StdFee,
  memo?: string
};

type sendMsgRegisterDomainParams = {
  value: MsgRegisterDomain,
  fee?: StdFee,
  memo?: string
};

type sendMsgRenewDomainParams = {
  value: MsgRenewDomain,
  fee?: StdFee,
  memo?: string
};

type sendMsgAddAccountCertificateParams = {
  value: MsgAddAccountCertificate,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteAccountParams = {
  value: MsgDeleteAccount,
  fee?: StdFee,
  memo?: string
};

type sendMsgRegisterAccountParams = {
  value: MsgRegisterAccount,
  fee?: StdFee,
  memo?: string
};

type msgReplaceAccountResourcesParams = {
  value: MsgReplaceAccountResources,
};

type msgDeleteDomainParams = {
  value: MsgDeleteDomain,
};

type msgDeleteAccountCertificateParams = {
  value: MsgDeleteAccountCertificate,
};

type msgRenewAccountParams = {
  value: MsgRenewAccount,
};

type msgTransferDomainParams = {
  value: MsgTransferDomain,
};

type msgReplaceAccountMetadataParams = {
  value: MsgReplaceAccountMetadata,
};

type msgTransferAccountParams = {
  value: MsgTransferAccount,
};

type msgRegisterDomainParams = {
  value: MsgRegisterDomain,
};

type msgRenewDomainParams = {
  value: MsgRenewDomain,
};

type msgAddAccountCertificateParams = {
  value: MsgAddAccountCertificate,
};

type msgDeleteAccountParams = {
  value: MsgDeleteAccount,
};

type msgRegisterAccountParams = {
  value: MsgRegisterAccount,
};

export const registry = new Registry(msgTypes);

type Field = {
  name: string;
  type: unknown;
};
function getStructure(template) {
  const structure: { fields: Field[] } = { fields: [] };
  for (const [key, value] of Object.entries(template)) {
    const field = { name: key, type: typeof value };
    structure.fields.push(field);
  }
  return structure;
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
  prefix: string
  signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "aumma" }) => ({

  async sendMsgReplaceAccountResources({ value, fee, memo }: sendMsgReplaceAccountResourcesParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgReplaceAccountResources: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgReplaceAccountResources({ value: MsgReplaceAccountResources.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgReplaceAccountResources: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgDeleteDomain({ value, fee, memo }: sendMsgDeleteDomainParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgDeleteDomain: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgDeleteDomain({ value: MsgDeleteDomain.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgDeleteDomain: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgDeleteAccountCertificate({ value, fee, memo }: sendMsgDeleteAccountCertificateParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgDeleteAccountCertificate: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgDeleteAccountCertificate({ value: MsgDeleteAccountCertificate.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgDeleteAccountCertificate: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgRenewAccount({ value, fee, memo }: sendMsgRenewAccountParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgRenewAccount: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgRenewAccount({ value: MsgRenewAccount.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgRenewAccount: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgTransferDomain({ value, fee, memo }: sendMsgTransferDomainParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgTransferDomain: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgTransferDomain({ value: MsgTransferDomain.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgTransferDomain: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgReplaceAccountMetadata({ value, fee, memo }: sendMsgReplaceAccountMetadataParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgReplaceAccountMetadata: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgReplaceAccountMetadata({ value: MsgReplaceAccountMetadata.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgReplaceAccountMetadata: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgTransferAccount({ value, fee, memo }: sendMsgTransferAccountParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgTransferAccount: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgTransferAccount({ value: MsgTransferAccount.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgTransferAccount: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgRegisterDomain({ value, fee, memo }: sendMsgRegisterDomainParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgRegisterDomain: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgRegisterDomain({ value: MsgRegisterDomain.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgRegisterDomain: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgRenewDomain({ value, fee, memo }: sendMsgRenewDomainParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgRenewDomain: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgRenewDomain({ value: MsgRenewDomain.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgRenewDomain: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgAddAccountCertificate({ value, fee, memo }: sendMsgAddAccountCertificateParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgAddAccountCertificate: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgAddAccountCertificate({ value: MsgAddAccountCertificate.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgAddAccountCertificate: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgDeleteAccount({ value, fee, memo }: sendMsgDeleteAccountParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgDeleteAccount: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgDeleteAccount({ value: MsgDeleteAccount.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgDeleteAccount: Could not broadcast Tx: ${e.message}`);
    }
  },

  async sendMsgRegisterAccount({ value, fee, memo }: sendMsgRegisterAccountParams): Promise<DeliverTxResponse> {
    if (!signer) {
      throw new Error("TxClient:sendMsgRegisterAccount: Unable to sign Tx. Signer is not present.");
    }
    try {
      const { address } = (await signer.getAccounts())[0];
      const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
      const msg = this.msgRegisterAccount({ value: MsgRegisterAccount.fromPartial(value) });
      return await signingClient.signAndBroadcast(address, [msg], fee || defaultFee, memo);
    } catch (e: any) {
      throw new Error(`TxClient:sendMsgRegisterAccount: Could not broadcast Tx: ${e.message}`);
    }
  },

  msgReplaceAccountResources({ value }: msgReplaceAccountResourcesParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgReplaceAccountResources", value: MsgReplaceAccountResources.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgReplaceAccountResources: Could not create message: ${e.message}`);
    }
  },

  msgDeleteDomain({ value }: msgDeleteDomainParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgDeleteDomain", value: MsgDeleteDomain.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgDeleteDomain: Could not create message: ${e.message}`);
    }
  },

  msgDeleteAccountCertificate({ value }: msgDeleteAccountCertificateParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgDeleteAccountCertificate", value: MsgDeleteAccountCertificate.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgDeleteAccountCertificate: Could not create message: ${e.message}`);
    }
  },

  msgRenewAccount({ value }: msgRenewAccountParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgRenewAccount", value: MsgRenewAccount.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgRenewAccount: Could not create message: ${e.message}`);
    }
  },

  msgTransferDomain({ value }: msgTransferDomainParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgTransferDomain", value: MsgTransferDomain.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgTransferDomain: Could not create message: ${e.message}`);
    }
  },

  msgReplaceAccountMetadata({ value }: msgReplaceAccountMetadataParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgReplaceAccountMetadata", value: MsgReplaceAccountMetadata.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgReplaceAccountMetadata: Could not create message: ${e.message}`);
    }
  },

  msgTransferAccount({ value }: msgTransferAccountParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgTransferAccount", value: MsgTransferAccount.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgTransferAccount: Could not create message: ${e.message}`);
    }
  },

  msgRegisterDomain({ value }: msgRegisterDomainParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgRegisterDomain", value: MsgRegisterDomain.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgRegisterDomain: Could not create message: ${e.message}`);
    }
  },

  msgRenewDomain({ value }: msgRenewDomainParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgRenewDomain", value: MsgRenewDomain.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgRenewDomain: Could not create message: ${e.message}`);
    }
  },

  msgAddAccountCertificate({ value }: msgAddAccountCertificateParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgAddAccountCertificate", value: MsgAddAccountCertificate.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgAddAccountCertificate: Could not create message: ${e.message}`);
    }
  },

  msgDeleteAccount({ value }: msgDeleteAccountParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgDeleteAccount", value: MsgDeleteAccount.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgDeleteAccount: Could not create message: ${e.message}`);
    }
  },

  msgRegisterAccount({ value }: msgRegisterAccountParams): EncodeObject {
    try {
      return { typeUrl: "/ummachain.ummacore.starname.v1beta1.MsgRegisterAccount", value: MsgRegisterAccount.fromPartial(value) };
    } catch (e: any) {
      throw new Error(`TxClient:MsgRegisterAccount: Could not create message: ${e.message}`);
    }
  },

});

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => new Api({ baseURL: addr });

class SDKModule {
  public query: ReturnType<typeof queryClient>;

  public tx: ReturnType<typeof txClient>;

  public structure: Record<string, unknown>;

  public registry: Array<[string, GeneratedType]> = [];

  constructor(client: IgniteClient) {
    this.query = queryClient({ addr: client.env.apiURL });
    this.updateTX(client);
    this.structure = {
      Resource: getStructure(typeResource.fromPartial({})),
      Domain: getStructure(typeDomain.fromPartial({})),
      Account: getStructure(typeAccount.fromPartial({})),

    };
    client.on("signer-changed", (signer) => {
		 this.updateTX(client);
    });
  }

  updateTX(client: IgniteClient) {
    const methods = txClient({
      signer: client.signer,
      addr: client.env.rpcURL,
      prefix: client.env.prefix ?? "cosmos",
    });

    this.tx = methods;
    for (const m in methods) {
      this.tx[m] = methods[m].bind(this.tx);
    }
  }
}

const Module = (test: IgniteClient) => ({
  module: {
    UmmachainUmmacoreStarnameV1Beta1: new SDKModule(test),
  },
  registry: msgTypes,
});
export default Module;
