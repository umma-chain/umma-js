// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateDenom } from "./types/factory/tx";
import { MsgUpdateOwner } from "./types/factory/tx";
import { MsgMintAndSendTokens } from "./types/factory/tx";
import { MsgUpdateDenom } from "./types/factory/tx";
import { MsgBurnToken } from "./types/factory/tx";

import { Denom as typeDenom} from "./types"
import { Params as typeParams} from "./types"

export { MsgCreateDenom, MsgUpdateOwner, MsgMintAndSendTokens, MsgUpdateDenom, MsgBurnToken };

type sendMsgCreateDenomParams = {
  value: MsgCreateDenom,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateOwnerParams = {
  value: MsgUpdateOwner,
  fee?: StdFee,
  memo?: string
};

type sendMsgMintAndSendTokensParams = {
  value: MsgMintAndSendTokens,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateDenomParams = {
  value: MsgUpdateDenom,
  fee?: StdFee,
  memo?: string
};

type sendMsgBurnTokenParams = {
  value: MsgBurnToken,
  fee?: StdFee,
  memo?: string
};


type msgCreateDenomParams = {
  value: MsgCreateDenom,
};

type msgUpdateOwnerParams = {
  value: MsgUpdateOwner,
};

type msgMintAndSendTokensParams = {
  value: MsgMintAndSendTokens,
};

type msgUpdateDenomParams = {
  value: MsgUpdateDenom,
};

type msgBurnTokenParams = {
  value: MsgBurnToken,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateDenom({ value, fee, memo }: sendMsgCreateDenomParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateDenom: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateDenom({ value: MsgCreateDenom.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateDenom: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateOwner({ value, fee, memo }: sendMsgUpdateOwnerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateOwner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateOwner({ value: MsgUpdateOwner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateOwner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgMintAndSendTokens({ value, fee, memo }: sendMsgMintAndSendTokensParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgMintAndSendTokens: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgMintAndSendTokens({ value: MsgMintAndSendTokens.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgMintAndSendTokens: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateDenom({ value, fee, memo }: sendMsgUpdateDenomParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateDenom: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateDenom({ value: MsgUpdateDenom.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateDenom: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBurnToken({ value, fee, memo }: sendMsgBurnTokenParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBurnToken: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBurnToken({ value: MsgBurnToken.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBurnToken: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateDenom({ value }: msgCreateDenomParams): EncodeObject {
			try {
				return { typeUrl: "/ummachain.ummacore.factory.MsgCreateDenom", value: MsgCreateDenom.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateDenom: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateOwner({ value }: msgUpdateOwnerParams): EncodeObject {
			try {
				return { typeUrl: "/ummachain.ummacore.factory.MsgUpdateOwner", value: MsgUpdateOwner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateOwner: Could not create message: ' + e.message)
			}
		},
		
		msgMintAndSendTokens({ value }: msgMintAndSendTokensParams): EncodeObject {
			try {
				return { typeUrl: "/ummachain.ummacore.factory.MsgMintAndSendTokens", value: MsgMintAndSendTokens.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgMintAndSendTokens: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateDenom({ value }: msgUpdateDenomParams): EncodeObject {
			try {
				return { typeUrl: "/ummachain.ummacore.factory.MsgUpdateDenom", value: MsgUpdateDenom.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateDenom: Could not create message: ' + e.message)
			}
		},
		
		msgBurnToken({ value }: msgBurnTokenParams): EncodeObject {
			try {
				return { typeUrl: "/ummachain.ummacore.factory.MsgBurnToken", value: MsgBurnToken.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBurnToken: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Denom: getStructure(typeDenom.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			UmmachainUmmacoreFactory: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;